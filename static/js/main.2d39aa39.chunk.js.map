{"version":3,"sources":["hooks/useKeyboard.js","hooks/useAnimationFrame.js","lib/util.js","lib/object.js","lib/timer.js","lib/colors.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["useKeyboard","listener","useEffect","keyListener","code","keyCode","document","addEventListener","removeEventListener","useAnimationFrame","tickCallback","stopPredicate","dependencies","reqId","window","requestAnimationFrame","step","cancelAnimationFrame","durationAsString","time","withSign","durationAsMap","hours","minutes","seconds","milliseconds","join","parseSegment","timestamp","padLength","str","length","padStart","padNumber","Math","abs","mapAsDuration","patch","obj","newObj","Object","assign","init","direction","duration","stateSnapshot","threshold","eventsSnapshot","state","events","setState","newState","patchState","setEvents","newEvents","resolveLaps","reduce","accum","index","arr","type","prevType","prevTimestamp","includes","push","endTime","startTime","getEvents","getState","getLaps","_getEllapsedTime","filter","running","paused","Date","now","getEllapsedTime","ellapsedTime","getEllapsedTimeString","command","actionFn","eventPredicate","start","pause","resume","stop","lap","abortLap","pop","clear","generateIterator","colorNames","colorLevels","count","level","name","materialUiColors","api","flatMap","concat","map","flattenColorMap","iterator","App","useLocalStorage","timerThreshold","setTimerThreshold","timerDuration","setTimerDuration","timerState","setTimerState","timerEvents","setTimerEvents","countdownTimer","timer","useState","laps","setLaps","setEllapsedTime","editMode","setEditMode","patchUnmarshalledTimerState","renderButton","callback","customProps","className","style","onMouseDown","renderTimeSegmentInput","segmentKey","timeObj","onChange","value","effect","border","multiline","e","target","key","backgroundColor","colors","paddingLeft","toLocaleString","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2d39aa39.chunk.js","sourcesContent":["import {useEffect} from 'react'\n\n\nconst useKeyboard = (listener = () => {}) => {\n  useEffect(() => {\n    const keyListener = ({keyCode: code}) => listener({code})\n\n    // keydown is best for capturing backspace and such\n    document.addEventListener('keydown', keyListener)\n    return () => {\n      document.removeEventListener('keydown', keyListener)\n    }\n  })\n}\n\n\nexport default useKeyboard\n","\nimport {useEffect} from 'react'\n\nconst useAnimationFrame = (tickCallback = () => {}, stopPredicate = () => 1, dependencies) => {\n  useEffect(() => {\n    let reqId = window.requestAnimationFrame(function step() {\n      tickCallback()\n      if (!stopPredicate()) {\n        reqId = window.requestAnimationFrame(step)\n      }\n    })\n    return () => {\n      window.cancelAnimationFrame(reqId)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies)\n}\n\nexport default useAnimationFrame\n","\nexport const durationAsString = (time, withSign) => {\n  const {hours, minutes, seconds, milliseconds} = durationAsMap(time)\n  return `${withSign ? (time < 0 ? '-' : ' ') : ''}${\n    [hours, minutes, seconds].join(':')\n  }.${milliseconds}${withSign ? ' ' : ''}`\n}\n\nexport const padNumber = (str, length = 2) => `${str}`.padStart(length, '0')\n\nexport const durationAsMap = time => {\n  const parseSegment = (timestamp, padLength) => {\n    return padNumber(Math.abs(Math[time < 0 ? 'ceil' : 'floor'](timestamp)), padLength)\n  }\n  return {\n    hours: parseSegment(time / 1000 / 60 / 60),\n    minutes: parseSegment((time / 1000 / 60) % 60),\n    seconds: parseSegment((time / 1000) % 60),\n    milliseconds: parseSegment(time % 1000, 3),\n  }\n}\n\nexport const mapAsDuration = ({hours, minutes, seconds, milliseconds}) => {\n  return (hours * 60 * 60 * 1000) + (minutes * 60 * 1000) + (seconds * 1000) + milliseconds\n}\n","\n// mutates obj!\nexport const patch = (obj = {}, newObj = {}) => Object.assign(obj, newObj)\n\nexport const serialize = (...args) => args.length ? JSON.stringify(...args) : ''\n\nexport const deserialize = string => JSON.parse(string ?? '{}')\n","import {patch} from './object'\nimport {durationAsString} from './util'\n\nconst init = ({\n  direction = 'up',\n  duration = 30 * 1000,\n  threshold = 5 * 1000,\n} = {}, stateSnapshot, eventsSnapshot) => {\n\n  let state = stateSnapshot ?? {}\n  let events = eventsSnapshot ?? []\n\n  const setState = newState => (state = newState)\n  const patchState = newState => patch(state, newState)\n  const setEvents = newEvents => (events = newEvents)\n\n  const resolveLaps = () => events\n    .reduce((accum, {type, timestamp}, index, arr) => {\n      const {type: prevType, timestamp: prevTimestamp} = arr[index - 1] ?? {}\n      if (prevType === 'lap' && ['lap', 'stop', 'pause'].includes(type)) {\n        accum.push({\n          endTime: timestamp,\n          startTime: prevTimestamp,\n          duration: timestamp - prevTimestamp,\n        })\n      }\n      return accum\n    }, [])\n\n  const getEvents = () => events ?? []\n  const getState = () => state ?? {}\n  const getLaps = resolveLaps\n\n  const _getEllapsedTime = () => events\n    .filter(({type}) => ['start', 'stop', 'pause', 'resume'].includes(type))\n    .reduce((accum, {timestamp, type}, index, arr) => {\n      const {timestamp: prevTimestamp, type: prevType} = arr[index - 1] ?? {}\n      if (state.running && !state.paused && !arr[index + 1]) {\n        accum += Date.now() - timestamp\n      } else if ((type === 'pause' || type === 'stop') &&\n        (prevType === 'start' || prevType === 'resume')) {\n        accum += (timestamp - prevTimestamp)\n      }\n      return accum\n    }, 0)\n\n  const getEllapsedTime = (ellapsedTime = _getEllapsedTime()) => direction === 'up' ? ellapsedTime : duration - ellapsedTime\n\n  const getEllapsedTimeString = () => durationAsString(getEllapsedTime(), true)\n\n  const command = (type, actionFn = () => {}, eventPredicate = () => 1) => (time = Date.now()) => {\n    actionFn(time)\n    eventPredicate() && events.push({\n      type,\n      timestamp: time,\n    })\n  }\n\n  const start = command(\n    'start',\n    time => !state.running && patchState({running: true}))\n  const pause = command(\n    'pause',\n    () => state.running && !state.paused && patchState({paused: true}))\n  const resume = command(\n    'resume',\n    () => state.paused && state.paused && patchState({paused: false}))\n  const stop = command(\n    'stop',\n    time => state.running && patchState({running: false}))\n  const lap = command(\n    'lap',\n    void 0,\n    () => state.running && !state.paused)\n  const abortLap = () => {\n    if (state.running && !state.paused &&\n      (events[events.length - 1] || {}).type === 'lap') {\n      events.pop()\n    }\n  }\n  const clear = () => !state.running && setState({}) && setEvents([])\n\n  return {\n    start,\n    pause,\n    resume,\n    stop,\n    lap,\n    abortLap,\n    clear,\n    getState,\n    getLaps,\n    getEvents,\n    getEllapsedTime,\n    getEllapsedTimeString,\n  }\n}\n\nexport default init\n","import * as materialUiColors from 'material-ui-colors'\n\n\nconst colorNames = [\n  'red',\n  'pink',\n  'purple',\n  'deepPurple',\n  'indigo',\n  'blue',\n  'lightBlue',\n  'cyan',\n  'teal',\n  'green',\n  'lightGreen',\n  'lime',\n  'yellow',\n  'amber',\n  'orange',\n  'deepOrange',\n  'brown',\n  'grey',\n  'blueGrey',\n]\n\nconst colorLevels = [\n  // '50',\n  // '100',\n  // '200',\n  '300',\n  '400',\n  '500',\n  '600',\n  '700',\n  '800',\n  '900',\n  'A100',\n  // 'A200',\n  // 'A400',\n  // 'A700',\n]\n\nfunction* generateIterator() {\n  let count = 0\n  for (let level of colorLevels) {\n    for (let name of colorNames) {\n      count++\n      yield materialUiColors[name][level]\n    }\n  }\n  return count;\n}\n\nconst flattenColorMap = () => [].concat(...colorLevels\n  .map(level => colorNames\n    .map(name => materialUiColors[name][level])))\n\nconst api = {\n  flatMap: flattenColorMap(),\n  iterator: generateIterator(),\n}\n\n\nexport default api\n","import React, {useState} from 'react'\nimport useLocalStorage from 'use-local-storage'\nimport useKeyboard from './hooks/useKeyboard'\nimport useAnimationFrame from './hooks/useAnimationFrame'\nimport {mapAsDuration, durationAsString} from './lib/util'\nimport timer from './lib/timer'\nimport colors from './lib/colors'\nimport ReactTooltip from 'react-tooltip'\nimport './App.css'\n\nfunction App() {\n\n  const [timerThreshold, setTimerThreshold] = useLocalStorage('timer-threshold', {\n    hours: 0,\n    minutes: 0,\n    seconds: 3,\n    milliseconds: 45,\n  })\n  const [timerDuration, setTimerDuration] = useLocalStorage('timer-duration', {\n    hours: 0,\n    minutes: 0,\n    seconds: 12,\n    milliseconds: 345,\n  })\n\n  const [timerState, setTimerState] = useLocalStorage('timer-state', {})\n  const [timerEvents, setTimerEvents] = useLocalStorage('timer-events', [])\n\n  const countdownTimer = timer({\n    direction: 'down',\n    duration: mapAsDuration(timerDuration),\n    threshold: mapAsDuration(timerThreshold),\n  }, timerState, timerEvents)\n\n  const [laps, setLaps] = useState(countdownTimer.getLaps() ?? [])\n  const [ellapsedTime, setEllapsedTime] = useState(countdownTimer.getEllapsedTimeString())\n\n  const [editMode, setEditMode] = useState(false)\n\n  const patchUnmarshalledTimerState = () => {\n    setTimerState({...timerState, ...countdownTimer.getState()})\n    setTimerEvents([...countdownTimer.getEvents()])\n    setLaps([...countdownTimer.getLaps()])\n  }\n\n  const setUnmarshalledTimerState = () => {\n    setTimerState({...countdownTimer.getState()})\n    setTimerEvents([...countdownTimer.getEvents()])\n    setLaps([...countdownTimer.getLaps()])\n  }\n\n  const renderButton = (command, callback = patchUnmarshalledTimerState, customProps = {}) => (<button\n    data-tip={command}\n    className={`App-button-${command} ${\n      command === 'lap' &&\n      (timerEvents[timerEvents.length - 1] || {}).type === 'lap' ? 'spinPulse' : ''\n    }`}\n    style={{\n      '--pulse-delay': `${mapAsDuration(timerThreshold)}ms`,\n    }}\n    onMouseDown={() => {\n      countdownTimer[command] && countdownTimer[command]()\n      callback()\n    }}\n    {...customProps}\n    ></button>)\n\n  const renderTimeSegmentInput = (segmentKey, timeObj, onChange) => (<input type=\"number\"\n    className={`App-config-input App-config-input-${segmentKey}`}\n    value={timeObj[segmentKey]}\n    onChange={onChange} />)\n\n  const renderDurationTimeSegmentInput = segmentKey => renderTimeSegmentInput(\n    segmentKey, timerDuration, e => setTimerDuration({\n      ...timerDuration,\n      [segmentKey]: +e.target.value,\n    }))\n\n  const renderThresholdTimeSegmentInput = segmentKey => renderTimeSegmentInput(\n    segmentKey, timerThreshold, e => setTimerThreshold({\n      ...timerThreshold,\n      [segmentKey]: +e.target.value,\n    }))\n\n\n  useKeyboard(({code}) => {\n    switch (code) {\n      case 32: // spacebar\n        countdownTimer.lap()\n        patchUnmarshalledTimerState()\n        break\n      case 8: // backspace\n        countdownTimer.abortLap()\n        patchUnmarshalledTimerState()\n        break\n      default:\n        break\n    }\n  })\n\n  useAnimationFrame(\n    () => setEllapsedTime(countdownTimer.getEllapsedTimeString()),\n    () => !timerState.running || timerState.paused,\n    [timerState.running, timerState.paused])\n\n\n  return (\n    <div className=\"App\">\n      <ReactTooltip\n        effect=\"solid\"\n        border\n        multiline\n      />\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">countdown</h1>\n      </header>\n      <div className=\"App-top-menu\">\n        {renderButton('config', () => setEditMode(!editMode), {\n          'data-place': 'bottom',\n        })}\n      </div>\n      {editMode ?\n      (<div className=\"App-config-modal\">\n        <label className=\"App-config-label\">threshold</label>\n        <div className=\"App-config-box\">\n          {['hours', 'minutes', 'seconds', 'milliseconds']\n              .map(renderThresholdTimeSegmentInput)}\n        </div>\n        <label className=\"App-config-label\">duration</label>\n        <div className=\"App-config-box\">\n          {['hours', 'minutes', 'seconds', 'milliseconds']\n              .map(renderDurationTimeSegmentInput)}\n        </div>\n      </div>\n      ) : (\n      <main className=\"App-main\">\n\n        <pre className=\"App-time-display\">{ellapsedTime}</pre>\n        <nav className=\"App-controls\">\n          {renderButton(\n            timerState.running ?\n              timerState.paused ? 'resume' : 'pause' :\n                'start')}\n          {renderButton('stop')}\n          {renderButton('lap')}\n          {renderButton('clear', setUnmarshalledTimerState)}\n        </nav>\n\n        <div className=\"App-laps-display\">\n          {laps.map(({startTime, endTime, duration}, key, arr) => (<span\n            key={key}\n            className=\"App-laps-item\"\n            style={{\n              backgroundColor: colors.flatMap[key],\n              paddingLeft: `${duration / (arr.reduce((accum, {duration}) => (accum += duration), 0) / 100)}%`\n            }}\n            data-tip={`\nstart time: ${new Date(startTime).toLocaleString()}<br/>\nend time: ${new Date(endTime).toLocaleString()}<br/>\nduration: ${durationAsString(duration)}<br/>`\n            }\n            >&nbsp;</span>))}\n        </div>\n      </main>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}