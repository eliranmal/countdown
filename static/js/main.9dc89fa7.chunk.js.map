{"version":3,"sources":["lib/object.js","lib/timer.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["patch","obj","newObj","Object","assign","init","direction","duration","stateSnapshot","threshold","eventsSnapshot","laps","state","events","setState","newState","patchState","setLaps","newLaps","setEvents","newEvents","resolveLaps","lapTimestamps","map","time","getEvents","getState","getLaps","filter","type","timestamp","_getEllapsedTime","includes","reduce","accum","index","arr","prevTimestamp","prevType","running","paused","Date","now","getEllapsedTime","ellapsedTime","getEllapsedTimeString","parseSegment","padLength","str","length","padStart","pad","Math","abs","join","command","callback","push","start","pause","resume","stop","lap","clear","App","useLocalStorage","timerState","setTimerState","timerEvents","setTimerEvents","countdownTimer","timer","useState","setEllapsedTime","patchTimerData","renderButton","title","className","onMouseDown","useEffect","reqId","window","requestAnimationFrame","step","cancelAnimationFrame","lapData","key","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9dc89fa7.chunk.js","sourcesContent":["\r\n// mutates obj!\r\nexport const patch = (obj = {}, newObj = {}) => Object.assign(obj, newObj)\r\n\r\nexport const serialize = (...args) => args.length ? JSON.stringify(...args) : ''\r\n\r\nexport const deserialize = string => JSON.parse(string ?? '{}')\r\n","import {patch} from './object'\r\n\r\n// todo - optionally accept a storage object with known crud api, and compse it\r\nconst init = ({\r\n  direction = 'up',\r\n  duration = 30 * 1000,\r\n  threshold = 10 * 1000,\r\n} = {}, stateSnapshot, eventsSnapshot) => {\r\n\r\n  let laps = []\r\n  let state = stateSnapshot ?? {}\r\n\r\n  // {\r\n  //   type: 'play|stop|pause|resume|lap',\r\n  //   timestamp: 210010010010000,\r\n  // }\r\n  let events = eventsSnapshot ?? []\r\n\r\n  const setState = newState => (state = newState)\r\n  const patchState = newState => patch(state, newState)\r\n  const setLaps = newLaps => (laps = newLaps)\r\n  const setEvents = newEvents => (events = newEvents)\r\n\r\n  const resolveLaps = (lapTimestamps = []) => lapTimestamps\r\n    .map(time => time)\r\n  // todo - use reduce to compare prev time and curr time, and add that as 'duration'\r\n\r\n  // ----------------------------------------------------------------\r\n  // todo - extract method (see below) and continue from there\r\n  // .filter(({type}) => type === 'lap')\r\n  // .map(val => val)\r\n\r\n\r\n  const getEvents = () => events ?? []\r\n  const getState = () => state ?? {}\r\n  const getLaps = () => resolveLaps(events\r\n    .filter(({type}) => type === 'lap')\r\n    .map(({timestamp}) => timestamp))\r\n\r\n  const _getEllapsedTime = () => events\r\n  // todo - extract some of this to a utilty that transforms the absolute data (global timestamps) to relative data (the timer period sums), then share with resolveLaps()\r\n  .filter(({type}) => ['start', 'stop', 'pause', 'resume'].includes(type))\r\n  .reduce((accum, {timestamp, type}, index, arr) => {\r\n    const {timestamp: prevTimestamp, type: prevType} = arr[index - 1] ?? {}\r\n    if (state.running && !state.paused && !arr[index + 1]) {\r\n      accum += Date.now() - timestamp\r\n    } else if ((type === 'pause' || type === 'stop') &&\r\n    (prevType === 'start' || prevType === 'resume')) {\r\n      accum += (timestamp - prevTimestamp)\r\n    }\r\n    return accum\r\n  }, 0)\r\n\r\n  const getEllapsedTime = (ellapsedTime = _getEllapsedTime()) => direction === 'up' ? ellapsedTime : duration - ellapsedTime\r\n\r\n  const getEllapsedTimeString = () => {\r\n    const time = getEllapsedTime()\r\n    const pad = (str, length = 2) => `${str}`.padStart(length, '0')\r\n    const parseSegment = (timestamp, padLength) => pad(Math.abs(Math[time < 0 ? 'ceil' : 'floor'](timestamp)), padLength)\r\n    return `${time < 0 ? '-' : ' '}${[\r\n      parseSegment(time / 1000 / 60 / 60),\r\n      parseSegment(time / 1000 / 60),\r\n      parseSegment(time / 1000),\r\n      parseSegment(time % 1000, 3),\r\n    ].join(':')}`\r\n  }\r\n\r\n  const command = (type, callback) => (time = Date.now()) => callback(time) && events.push({\r\n    type,\r\n    timestamp: time,\r\n  })\r\n\r\n  const start = command(\r\n    'start',\r\n    time => !state.running && patchState({running: true}))\r\n  const pause = command(\r\n    'pause',\r\n    () => state.running && !state.paused && patchState({paused: true}))\r\n  const resume = command(\r\n    'resume',\r\n    () => state.paused && state.paused && patchState({paused: false}))\r\n  const stop = command(\r\n    'stop',\r\n    time => state.running && patchState({running: false}))\r\n  const lap = command(\r\n    'lap',\r\n    time => state.running && !state.paused && laps.push(time))\r\n  const clear = () => !state.running && setLaps([]) && setState({}) && setEvents([])\r\n\r\n  return {\r\n    start,\r\n    pause,\r\n    resume,\r\n    stop,\r\n    lap,\r\n    clear,\r\n    getState,\r\n    getLaps,\r\n    getEvents,\r\n    getEllapsedTime,\r\n    getEllapsedTimeString,\r\n  }\r\n\r\n}\r\n\r\nexport default init\r\n","import React, {useState, useEffect} from 'react'\nimport useLocalStorage from 'use-local-storage'\nimport {loadObject, saveObject} from './lib/storage'\nimport timer from './lib/timer'\nimport './App.css'\n\nfunction App() {\n\n  const [timerState, setTimerState] = useLocalStorage('timer-state', {})\n  const [timerEvents, setTimerEvents] = useLocalStorage('timer-events', [])\n\n  const countdownTimer = timer({\n    direction: 'down',\n  }, timerState, timerEvents)\n\n  const [laps, setLaps] = useState(countdownTimer.getLaps())\n  const [ellapsedTime, setEllapsedTime] = useState(countdownTimer.getEllapsedTimeString())\n\n  const patchTimerData = () => {\n    setTimerState({...timerState, ...countdownTimer.getState()})\n    setTimerEvents([...countdownTimer.getEvents()])\n  }\n\n  const setTimerData = () => {\n    setTimerState({...countdownTimer.getState()})\n    setTimerEvents([...countdownTimer.getEvents()])\n  }\n\n  const renderButton = (command, callback = patchTimerData) => (<button\n    title={command}\n    className={`App-button-${command}`}\n    onMouseDown={() => countdownTimer[command]() && callback()}\n  ></button>)\n\n  useEffect(() => {\n    let reqId = window.requestAnimationFrame(function step() {\n      setEllapsedTime(countdownTimer.getEllapsedTimeString())\n      if (timerState.running && !timerState.paused) {\n        reqId = window.requestAnimationFrame(step)\n      }\n    })\n    return () => {\n      window.cancelAnimationFrame(reqId)\n    }\n  }, [timerState.running, timerState.paused])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">countdown</h1>\n      </header>\n      <main className=\"App-main\">\n        <code>\n          {(countdownTimer.getLaps() || [])\n            .map((lapData, key) => <p key={key}>{lapData}</p>)}\n        </code>\n        <pre className=\"App-time-display\">\n          {ellapsedTime}\n        </pre>\n        <nav className=\"App-controls\">\n          {/* todo - bind keyboard events */}\n          {/* todo - don't setState, do it more selectively. what do we really need here? */}\n          {renderButton(timerState.running ? timerState.paused ? 'resume' : 'pause' : 'start')}\n          {renderButton('stop')}\n          {renderButton('lap')}\n          {renderButton('clear', setTimerData)}\n        </nav>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}