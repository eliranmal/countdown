{"version":3,"sources":["lib/object.js","lib/io.js","lib/timer.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["patch","obj","newObj","Object","assign","serialize","length","JSON","stringify","loadObject","key","string","window","localStorage","getItem","load","parse","saveObject","setItem","save","EPOCH","initialState","startTime","endTime","init","stateSnapshot","direction","duration","threshold","state","laps","events","setState","newState","setLaps","newLaps","resolveLaps","lapTimestamps","map","time","filter","type","val","getState","getLaps","getEllapsedTime","includes","reduce","accum","index","arr","timestamp","prevTimestamp","prevType","running","paused","Date","now","getEllapsedTimeString","date","padTimeProp","prop","padStart","command","callback","push","start","pause","resume","stop","lap","clear","countdownTimer","timer","App","useState","ellapsedTime","setEllapsedTime","useEffect","appState","unloadListener","bind","addEventListener","removeEventListener","reqId","requestAnimationFrame","step","cancelAnimationFrame","className","onMouseDown","lapData","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.35bca97a.chunk.js","sourcesContent":["\r\n// mutates obj!\r\nexport const patch = (obj, newObj) => Object.assign(obj, newObj)\r\n\r\nexport const serialize = (...args) => args.length ? JSON.stringify(...args) : ''\r\n\r\nexport const deserialize = string => JSON.parse(string ?? '{}')\r\n","import {serialize, deserialize} from './object'\r\n\r\n\r\nconst load = key => window.localStorage && window.localStorage.getItem(key)\r\n\r\nconst save = (key, obj) => window.localStorage && window.localStorage.setItem(key, obj)\r\n\r\n\r\nexport const loadObject = key => deserialize(load(key))\r\n\r\nexport const saveObject = (key, obj) => save(key, serialize(obj))\r\n","import {patch} from './object'\r\n\r\n// the result of: new Date(1970, 0, 1).getTime()\r\nconst EPOCH = -7200000\r\n\r\nconst initialState = {\r\n  // todo - remove these defaults\r\n  startTime: EPOCH,\r\n  endTime: EPOCH,\r\n}\r\n\r\n// todo - optionally accept a storage object with known crud api, and compse it\r\nconst init = ({\r\n  direction = 'up',\r\n  duration = 30 * 1000,\r\n  threshold = 10 * 1000,\r\n} = {}, stateSnapshot = {}) => {\r\n\r\n  const state = {\r\n    ...initialState,\r\n    ...stateSnapshot,\r\n  }\r\n  const laps = []\r\n\r\n  // {\r\n  //   type: 'play|stop|pause|resume|lap',\r\n  //   timestamp: 210010010010000,\r\n  // }\r\n  let events = []\r\n\r\n  const setState = newState => patch(state, newState)\r\n  const setLaps = newLaps => patch(laps, newLaps)\r\n\r\n  const resolveLaps = (state, lapTimestamps) =>\r\n  (lapTimestamps || [])\r\n  .map(time => time - state.startTime)\r\n  // todo - use reduce to compare prev time and curr time, and add that as 'duration'\r\n\r\n  // ----------------------------------------------------------------\r\n  // todo - extract method (see below) and continue from there\r\n  .filter(({type}) => type === 'lap')\r\n  .map(val => val)\r\n\r\n\r\n  const getState = () => state\r\n  const getLaps = () => resolveLaps(state, events)\r\n\r\n  const _getEllapsedTime = () => state.running ? Date.now() - state.startTime : state.endTime - state.startTime\r\n\r\n  const getEllapsedTime = () => events\r\n  // todo - extract some of this to a utilty that transforms the absolute data (global timestamps) to relative data (the timer period sums), then share with resolveLaps()\r\n  .filter(({type}) => ['start', 'stop', 'pause', 'resume'].includes(type))\r\n  .reduce((accum, {timestamp, type}, index, arr) => {\r\n    const {timestamp: prevTimestamp, type: prevType} = arr[index - 1] ?? {}\r\n    if (state.running && !state.paused && !arr[index + 1]) {\r\n      accum += Date.now() - timestamp\r\n    } else if ((type === 'pause' || type === 'stop') &&\r\n    (prevType === 'start' || prevType === 'resume')) {\r\n      accum += (timestamp - prevTimestamp)\r\n    }\r\n    return accum\r\n  }, 0)\r\n\r\n  const getEllapsedTimeString = () => {\r\n    const date = new Date(getEllapsedTime())\r\n    const padTimeProp = (prop, length = 2) => `${date[prop]()}`.padStart(length, '0')\r\n    return `${padTimeProp('getUTCHours')}:${padTimeProp('getUTCMinutes')}:${padTimeProp('getUTCSeconds')}.${padTimeProp('getUTCMilliseconds', 3)}`\r\n  }\r\n\r\n  const command = (type, callback) => (time = Date.now()) => callback(time) && events.push({\r\n    type,\r\n    timestamp: time,\r\n  })\r\n\r\n  const start = command('start',\r\n  time => !state.running && setState({running: true, startTime: time}))\r\n  const pause = command('pause',\r\n  () => state.running && !state.paused && setState({paused: true}))\r\n  const resume = command('resume',\r\n  () => state.running && state.paused && setState({paused: false}))\r\n  const stop = command('stop',\r\n  time => state.running && setState({endTime: time, running: false}))\r\n  const lap = command('lap',\r\n  time => state.running && !state.paused && setLaps([...laps, time]))\r\n  const clear = () => !state.running && setState(initialState) && (events = [])\r\n\r\n  return {\r\n    start,\r\n    pause,\r\n    resume,\r\n    stop,\r\n    lap,\r\n    clear,\r\n    getState,\r\n    getLaps,\r\n    getEllapsedTime,\r\n    getEllapsedTimeString,\r\n  }\r\n\r\n}\r\n\r\nexport default init\r\n","import React, {useState, useEffect} from 'react';\n// import logo from './logo.svg';\nimport {loadObject, saveObject} from './lib/io'\nimport {serialize} from './lib/object'\nimport timer from './lib/timer'\nimport './App.css';\n\nconst countdownTimer = timer({\n  direction: 'down',\n})\n\nfunction App() {\n\n  const [ellapsedTime, setEllapsedTime] = useState(countdownTimer.getEllapsedTimeString())\n  const [state, setState] = useState(countdownTimer.getState())\n  const [laps, setLaps] = useState(countdownTimer.getLaps())\n\n  useEffect(() => {\n    // load application state from storage, in case the tab was closed/refreshed\n    const appState = loadObject('countdown-state')\n    setState(appState.state)\n    setLaps(appState.laps)\n  }, [])\n\n  useEffect(() => {\n    // when the tab is closed/refreshed, save application state to storage\n    const unloadListener = saveObject.bind(null, 'countdown-state', {\n      state: countdownTimer.getState(),\n      laps: countdownTimer.getLaps(),\n    })\n    window.addEventListener('beforeunload', unloadListener)\n    return () => {\n      window.removeEventListener('beforeunload', unloadListener)\n    }\n  }, [])\n\n  useEffect(() => {\n    let reqId = window.requestAnimationFrame(function step() {\n      setEllapsedTime(countdownTimer.getEllapsedTimeString())\n      if (state.running && !state.paused) {\n        reqId = window.requestAnimationFrame(step)\n      }\n    })\n    return () => {\n      window.cancelAnimationFrame(reqId)\n    }\n  }, [state])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        {/* todo - bind keyboard events */}\n        <button onMouseDown={() => countdownTimer.start() && setState({...state, ...countdownTimer.getState()})}>start</button>\n        <button onMouseDown={() => countdownTimer.pause() && setState({...state, ...countdownTimer.getState()})}>pause</button>\n        <button onMouseDown={() => countdownTimer.resume() && setState({...state, ...countdownTimer.getState()})}>resume</button>\n        <button onMouseDown={() => countdownTimer.stop() && setState({...state, ...countdownTimer.getState()})}>stop</button>\n        <button onMouseDown={() => countdownTimer.lap() && setState({...state, ...countdownTimer.getState()})}>lap</button>\n        <button onMouseDown={() => countdownTimer.clear() && setState({...state, ...countdownTimer.getState()})}>clear</button>\n      </header>\n      <hr/>\n      <main>\n        <code>\n          {(countdownTimer.getLaps() || []).map(lapData => <p>{lapData}</p>)}\n        </code>\n        <pre>\n          {ellapsedTime}\n        </pre>\n      </main>\n      <hr/>\n      <div>\n        <pre>\n          state: {serialize(state, null, 2)}\n        </pre>\n        <pre>\n          laps: {serialize(laps, null, 2)}\n        </pre>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}