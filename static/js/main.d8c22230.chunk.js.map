{"version":3,"sources":["hooks/useKeyboard.js","hooks/useAnimationFrame.js","lib/util.js","lib/object.js","lib/timer.js","lib/colors.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["useKeyboard","listener","useEffect","keyListener","code","keyCode","document","addEventListener","removeEventListener","useAnimationFrame","tickCallback","stopPredicate","dependencies","reqId","window","requestAnimationFrame","step","cancelAnimationFrame","durationAsString","time","withSign","durationAsMap","hours","minutes","seconds","milliseconds","join","parseSegment","timestamp","padLength","str","length","padStart","padNumber","Math","abs","patch","obj","newObj","Object","assign","init","direction","duration","stateSnapshot","threshold","eventsSnapshot","state","events","setState","newState","patchState","setEvents","newEvents","resolveLaps","reduce","accum","index","arr","type","prevType","prevTimestamp","includes","push","endTime","startTime","getEvents","getState","getLaps","_getEllapsedTime","filter","running","paused","Date","now","getEllapsedTime","ellapsedTime","getEllapsedTimeString","command","actionFn","eventPredicate","start","pause","resume","stop","lap","abortLap","pop","clear","generateIterator","colorNames","colorLevels","count","level","name","materialUiColors","api","flatMap","concat","map","flattenColorMap","iterator","App","useLocalStorage","timerDuration","setTimerDuration","timerState","setTimerState","timerEvents","setTimerEvents","countdownTimer","timer","useState","laps","setLaps","setEllapsedTime","editMode","setEditMode","patchUnmarshalledTimerState","renderButton","callback","title","className","onMouseDown","renderTimeSegmentInput","segmentKey","value","onChange","e","target","key","style","backgroundColor","colors","paddingLeft","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d8c22230.chunk.js","sourcesContent":["import {useEffect} from 'react'\r\n\r\n\r\nconst useKeyboard = (listener = () => {}) => {\r\n  useEffect(() => {\r\n    const keyListener = ({keyCode: code}) => listener({code})\r\n\r\n    // keydown is best for capturing backspace and such\r\n    document.addEventListener('keydown', keyListener)\r\n    return () => {\r\n      document.removeEventListener('keydown', keyListener)\r\n    }\r\n  })\r\n}\r\n\r\n\r\nexport default useKeyboard\r\n","\r\nimport {useEffect} from 'react'\r\n\r\nconst useAnimationFrame = (tickCallback = () => {}, stopPredicate = () => 1, dependencies) => {\r\n  useEffect(() => {\r\n    let reqId = window.requestAnimationFrame(function step() {\r\n      tickCallback()\r\n      if (!stopPredicate()) {\r\n        reqId = window.requestAnimationFrame(step)\r\n      }\r\n    })\r\n    return () => {\r\n      window.cancelAnimationFrame(reqId)\r\n    }\r\n  }, dependencies)\r\n}\r\n\r\nexport default useAnimationFrame\r\n","\r\nexport const durationAsString = (time, withSign) => {\r\n  const {hours, minutes, seconds, milliseconds} = durationAsMap(time)\r\n  return `${withSign ? (time < 0 ? '-' : ' ') : ''}${\r\n    [hours, minutes, seconds].join(':')\r\n  }.${milliseconds}${withSign ? ' ' : ''}`\r\n}\r\n\r\nexport const padNumber = (str, length = 2) => `${str}`.padStart(length, '0')\r\n\r\nexport const durationAsMap = time => {\r\n  const parseSegment = (timestamp, padLength) => {\r\n    return padNumber(Math.abs(Math[time < 0 ? 'ceil' : 'floor'](timestamp)), padLength)\r\n  }\r\n  return {\r\n    hours: parseSegment(time / 1000 / 60 / 60),\r\n    minutes: parseSegment((time / 1000 / 60) % 60),\r\n    seconds: parseSegment((time / 1000) % 60),\r\n    milliseconds: parseSegment(time % 1000, 3),\r\n  }\r\n}\r\n\r\nexport const mapAsDuration = ({hours, minutes, seconds, milliseconds}) => {\r\n  return (hours * 60 * 60 * 1000) + (minutes * 60 * 1000) + (seconds * 1000) + milliseconds\r\n}\r\n","\r\n// mutates obj!\r\nexport const patch = (obj = {}, newObj = {}) => Object.assign(obj, newObj)\r\n\r\nexport const serialize = (...args) => args.length ? JSON.stringify(...args) : ''\r\n\r\nexport const deserialize = string => JSON.parse(string ?? '{}')\r\n","import {patch} from './object'\r\nimport {durationAsString} from './util'\r\n\r\nconst init = ({\r\n  direction = 'up',\r\n  duration = 30 * 1000,\r\n  // todo - implement\r\n  threshold = 10 * 1000,\r\n} = {}, stateSnapshot, eventsSnapshot) => {\r\n\r\n  let state = stateSnapshot ?? {}\r\n  let events = eventsSnapshot ?? []\r\n\r\n  const setState = newState => (state = newState)\r\n  const patchState = newState => patch(state, newState)\r\n  const setEvents = newEvents => (events = newEvents)\r\n\r\n  const resolveLaps = () => events\r\n    .reduce((accum, {type, timestamp}, index, arr) => {\r\n      const {type: prevType, timestamp: prevTimestamp} = arr[index - 1] ?? {}\r\n      if (prevType === 'lap' && ['lap', 'stop', 'pause'].includes(type)) {\r\n        accum.push({\r\n          endTime: timestamp,\r\n          startTime: prevTimestamp,\r\n          duration: timestamp - prevTimestamp,\r\n        })\r\n      }\r\n      return accum\r\n    }, [])\r\n\r\n  const getEvents = () => events ?? []\r\n  const getState = () => state ?? {}\r\n  const getLaps = resolveLaps\r\n\r\n  const _getEllapsedTime = () => events\r\n    .filter(({type}) => ['start', 'stop', 'pause', 'resume'].includes(type))\r\n    .reduce((accum, {timestamp, type}, index, arr) => {\r\n      const {timestamp: prevTimestamp, type: prevType} = arr[index - 1] ?? {}\r\n      if (state.running && !state.paused && !arr[index + 1]) {\r\n        accum += Date.now() - timestamp\r\n      } else if ((type === 'pause' || type === 'stop') &&\r\n        (prevType === 'start' || prevType === 'resume')) {\r\n        accum += (timestamp - prevTimestamp)\r\n      }\r\n      return accum\r\n    }, 0)\r\n\r\n  const getEllapsedTime = (ellapsedTime = _getEllapsedTime()) => direction === 'up' ? ellapsedTime : duration - ellapsedTime\r\n\r\n  const getEllapsedTimeString = () => durationAsString(getEllapsedTime())\r\n\r\n  const command = (type, actionFn = () => {}, eventPredicate = () => 1) => (time = Date.now()) => {\r\n    actionFn(time)\r\n    eventPredicate() && events.push({\r\n      type,\r\n      timestamp: time,\r\n    })\r\n  }\r\n\r\n  const start = command(\r\n    'start',\r\n    time => !state.running && patchState({running: true}))\r\n  const pause = command(\r\n    'pause',\r\n    () => state.running && !state.paused && patchState({paused: true}))\r\n  const resume = command(\r\n    'resume',\r\n    () => state.paused && state.paused && patchState({paused: false}))\r\n  const stop = command(\r\n    'stop',\r\n    time => state.running && patchState({running: false}))\r\n  const lap = command(\r\n    'lap',\r\n    void 0,\r\n    () => state.running && !state.paused)\r\n  const abortLap = () => {\r\n    if (state.running && !state.paused &&\r\n      (events[events.length - 1] || {}).type === 'lap') {\r\n      events.pop()\r\n    }\r\n  }\r\n  const clear = () => !state.running && setState({}) && setEvents([])\r\n\r\n  return {\r\n    start,\r\n    pause,\r\n    resume,\r\n    stop,\r\n    lap,\r\n    abortLap,\r\n    clear,\r\n    getState,\r\n    getLaps,\r\n    getEvents,\r\n    getEllapsedTime,\r\n    getEllapsedTimeString,\r\n  }\r\n}\r\n\r\nexport default init\r\n","import * as materialUiColors from 'material-ui-colors'\r\n\r\n\r\nconst colorNames = [\r\n  'red',\r\n  'pink',\r\n  'purple',\r\n  'deepPurple',\r\n  'indigo',\r\n  'blue',\r\n  'lightBlue',\r\n  'cyan',\r\n  'teal',\r\n  'green',\r\n  'lightGreen',\r\n  'lime',\r\n  'yellow',\r\n  'amber',\r\n  'orange',\r\n  'deepOrange',\r\n  'brown',\r\n  'grey',\r\n  'blueGrey',\r\n]\r\n\r\nconst colorLevels = [\r\n  // '50',\r\n  // '100',\r\n  // '200',\r\n  '300',\r\n  '400',\r\n  '500',\r\n  '600',\r\n  '700',\r\n  '800',\r\n  '900',\r\n  'A100',\r\n  // 'A200',\r\n  // 'A400',\r\n  // 'A700',\r\n]\r\n\r\nfunction* generateIterator() {\r\n  let count = 0\r\n  for (let level of colorLevels) {\r\n    for (let name of colorNames) {\r\n      count++\r\n      yield materialUiColors[name][level]\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\nconst flattenColorMap = () => [].concat(...colorLevels\r\n  .map(level => colorNames\r\n    .map(name => materialUiColors[name][level])))\r\n\r\nconst api = {\r\n  flatMap: flattenColorMap(),\r\n  iterator: generateIterator(),\r\n}\r\n\r\n\r\nexport default api\r\n","import React, {useState} from 'react'\nimport useLocalStorage from 'use-local-storage'\nimport useKeyboard from './hooks/useKeyboard'\nimport useAnimationFrame from './hooks/useAnimationFrame'\nimport {durationAsMap, mapAsDuration} from './lib/util'\nimport timer from './lib/timer'\nimport colors from './lib/colors'\nimport './App.css'\n\nfunction App() {\n\n  const [timerDuration, setTimerDuration] = useLocalStorage('timer-duration', {\n    hours: 0,\n    minutes: 0,\n    seconds: 12,\n    milliseconds: 345,\n  })\n\n  const [timerState, setTimerState] = useLocalStorage('timer-state', {})\n  const [timerEvents, setTimerEvents] = useLocalStorage('timer-events', [])\n\n  const countdownTimer = timer({\n    direction: 'down',\n    duration: mapAsDuration(timerDuration), // todo - expose as input\n    threshold: 1000 * 10, // todo - expose as input, and implement!\n  }, timerState, timerEvents)\n\n  const [laps, setLaps] = useState(countdownTimer.getLaps() ?? [])\n  const [ellapsedTime, setEllapsedTime] = useState(countdownTimer.getEllapsedTimeString())\n\n  const [editMode, setEditMode] = useState(false)\n\n  const patchUnmarshalledTimerState = () => {\n    setTimerState({...timerState, ...countdownTimer.getState()})\n    setTimerEvents([...countdownTimer.getEvents()])\n    setLaps([...countdownTimer.getLaps()])\n  }\n\n  const setUnmarshalledTimerState = () => {\n    setTimerState({...countdownTimer.getState()})\n    setTimerEvents([...countdownTimer.getEvents()])\n    setLaps([...countdownTimer.getLaps()])\n  }\n\n  const renderButton = (command, callback = patchUnmarshalledTimerState) => (<button\n    title={command}\n    className={`App-button-${command}  ${\n      command === 'lap' &&\n      (timerEvents[timerEvents.length - 1] || {}).type === 'lap' ? 'spinning' : ''\n    }`}\n    onMouseDown={() => {\n      countdownTimer[command] && countdownTimer[command]()\n      callback()\n    }}></button>)\n\n  const renderTimeSegmentInput = segmentKey => (<input type=\"number\"\n    className={`App-duration-input App-duration-input-${segmentKey}`}\n    value={timerDuration[segmentKey]}\n    onChange={(e) => setTimerDuration({\n      ...timerDuration,\n      [segmentKey]: +e.target.value,\n    })} />)\n\n\n\n  useKeyboard(({code}) => {\n    switch (code) {\n      case 32: // spacebar\n        countdownTimer.lap()\n        patchUnmarshalledTimerState()\n        break\n      case 8: // backspace\n        countdownTimer.abortLap()\n        patchUnmarshalledTimerState()\n        break\n    }\n  })\n\n  useAnimationFrame(\n    () => setEllapsedTime(countdownTimer.getEllapsedTimeString()),\n    () => !timerState.running || timerState.paused,\n    [timerState.running, timerState.paused])\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">countdown</h1>\n      </header>\n      <div className=\"App-top-menu\">\n        {renderButton('config', () => setEditMode(!editMode))}\n      </div>\n      {editMode ?\n      (<div className=\"App-config-modal\">\n        <div className=\"App-duration-box\">\n          {/* todo - add labels etc. */}\n          {renderTimeSegmentInput('hours')}\n          {renderTimeSegmentInput('minutes')}\n          {renderTimeSegmentInput('seconds')}\n          {renderTimeSegmentInput('milliseconds')}\n        </div>\n      </div>\n      ) : (\n      <main className=\"App-main\">\n\n        <pre className=\"App-time-display\">{ellapsedTime}</pre>\n        <nav className=\"App-controls\">\n          {renderButton(\n            timerState.running ?\n              timerState.paused ? 'resume' : 'pause' :\n                'start')}\n          {renderButton('stop')}\n          {renderButton('lap')}\n          {renderButton('clear', setUnmarshalledTimerState)}\n        </nav>\n\n        <div className=\"App-laps-display\">\n          {laps.map(({startTime, endTime, duration}, key, arr) => (<span\n            key={key}\n            className=\"App-laps-item\"\n            style={{\n              backgroundColor: colors.flatMap[key],\n              paddingLeft: `${duration / (arr.reduce((accum, {duration}) => (accum += duration), 0) / 100)}%`\n            }}\n            >&nbsp;</span>))}\n        </div>\n      </main>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}